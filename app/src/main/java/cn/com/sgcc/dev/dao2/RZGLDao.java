package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.RZGL;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RZGL".
*/
public class RZGLDao extends AbstractDao<RZGL, Long> {

    public static final String TABLENAME = "RZGL";

    /**
     * Properties of entity RZGL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property DWMC = new Property(1, String.class, "DWMC", false, "DWMC");
        public final static Property CZR = new Property(2, String.class, "CZR", false, "CZR");
        public final static Property CZLX = new Property(3, String.class, "CZLX", false, "CZLX");
        public final static Property CZSJ = new Property(4, String.class, "CZSJ", false, "CZSJ");
        public final static Property BBS = new Property(5, String.class, "BBS", false, "BBS");
        public final static Property FLAGDYDZ = new Property(6, String.class, "FLAGDYDZ", false, "FLAGDYDZ");
        public final static Property SB = new Property(7, String.class, "SB", false, "SB");
        public final static Property SBSJ = new Property(8, String.class, "SBSJ", false, "SBSJ");
        public final static Property SFBDSJ = new Property(9, String.class, "SFBDSJ", false, "SFBDSJ");
        public final static Property SB_LS_ID = new Property(10, String.class, "SB_LS_ID", false, "SB_LS_ID");
        public final static Property SBDW = new Property(11, String.class, "SBDW", false, "SBDW");
        public final static Property BZ = new Property(12, String.class, "BZ", false, "BZ");
        public final static Property HZSJ = new Property(13, String.class, "HZSJ", false, "HZSJ");
        public final static Property SBCZLX = new Property(14, String.class, "SBCZLX", false, "SBCZLX");
        public final static Property SB_BHPZ_ID = new Property(15, String.class, "SB_BHPZ_ID", false, "SB_BHPZ_ID");
        public final static Property WJ_DW = new Property(16, String.class, "WJ_DW", false, "WJ_DW");
        public final static Property WJ_LS_ID = new Property(17, String.class, "WJ_LS_ID", false, "WJ_LS_ID");
        public final static Property DXZJ = new Property(18, long.class, "DXZJ", false, "DXZJ");
        public final static Property SFXTLR = new Property(19, String.class, "SFXTLR", false, "SFXTLR");
    }


    public RZGLDao(DaoConfig config) {
        super(config);
    }
    
    public RZGLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RZGL entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String DWMC = entity.getDWMC();
        if (DWMC != null) {
            stmt.bindString(2, DWMC);
        }
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(3, CZR);
        }
 
        String CZLX = entity.getCZLX();
        if (CZLX != null) {
            stmt.bindString(4, CZLX);
        }
 
        String CZSJ = entity.getCZSJ();
        if (CZSJ != null) {
            stmt.bindString(5, CZSJ);
        }
 
        String BBS = entity.getBBS();
        if (BBS != null) {
            stmt.bindString(6, BBS);
        }
 
        String FLAGDYDZ = entity.getFLAGDYDZ();
        if (FLAGDYDZ != null) {
            stmt.bindString(7, FLAGDYDZ);
        }
 
        String SB = entity.getSB();
        if (SB != null) {
            stmt.bindString(8, SB);
        }
 
        String SBSJ = entity.getSBSJ();
        if (SBSJ != null) {
            stmt.bindString(9, SBSJ);
        }
 
        String SFBDSJ = entity.getSFBDSJ();
        if (SFBDSJ != null) {
            stmt.bindString(10, SFBDSJ);
        }
 
        String SB_LS_ID = entity.getSB_LS_ID();
        if (SB_LS_ID != null) {
            stmt.bindString(11, SB_LS_ID);
        }
 
        String SBDW = entity.getSBDW();
        if (SBDW != null) {
            stmt.bindString(12, SBDW);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(13, BZ);
        }
 
        String HZSJ = entity.getHZSJ();
        if (HZSJ != null) {
            stmt.bindString(14, HZSJ);
        }
 
        String SBCZLX = entity.getSBCZLX();
        if (SBCZLX != null) {
            stmt.bindString(15, SBCZLX);
        }
 
        String SB_BHPZ_ID = entity.getSB_BHPZ_ID();
        if (SB_BHPZ_ID != null) {
            stmt.bindString(16, SB_BHPZ_ID);
        }
 
        String WJ_DW = entity.getWJ_DW();
        if (WJ_DW != null) {
            stmt.bindString(17, WJ_DW);
        }
 
        String WJ_LS_ID = entity.getWJ_LS_ID();
        if (WJ_LS_ID != null) {
            stmt.bindString(18, WJ_LS_ID);
        }
        stmt.bindLong(19, entity.getDXZJ());
 
        String SFXTLR = entity.getSFXTLR();
        if (SFXTLR != null) {
            stmt.bindString(20, SFXTLR);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RZGL entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String DWMC = entity.getDWMC();
        if (DWMC != null) {
            stmt.bindString(2, DWMC);
        }
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(3, CZR);
        }
 
        String CZLX = entity.getCZLX();
        if (CZLX != null) {
            stmt.bindString(4, CZLX);
        }
 
        String CZSJ = entity.getCZSJ();
        if (CZSJ != null) {
            stmt.bindString(5, CZSJ);
        }
 
        String BBS = entity.getBBS();
        if (BBS != null) {
            stmt.bindString(6, BBS);
        }
 
        String FLAGDYDZ = entity.getFLAGDYDZ();
        if (FLAGDYDZ != null) {
            stmt.bindString(7, FLAGDYDZ);
        }
 
        String SB = entity.getSB();
        if (SB != null) {
            stmt.bindString(8, SB);
        }
 
        String SBSJ = entity.getSBSJ();
        if (SBSJ != null) {
            stmt.bindString(9, SBSJ);
        }
 
        String SFBDSJ = entity.getSFBDSJ();
        if (SFBDSJ != null) {
            stmt.bindString(10, SFBDSJ);
        }
 
        String SB_LS_ID = entity.getSB_LS_ID();
        if (SB_LS_ID != null) {
            stmt.bindString(11, SB_LS_ID);
        }
 
        String SBDW = entity.getSBDW();
        if (SBDW != null) {
            stmt.bindString(12, SBDW);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(13, BZ);
        }
 
        String HZSJ = entity.getHZSJ();
        if (HZSJ != null) {
            stmt.bindString(14, HZSJ);
        }
 
        String SBCZLX = entity.getSBCZLX();
        if (SBCZLX != null) {
            stmt.bindString(15, SBCZLX);
        }
 
        String SB_BHPZ_ID = entity.getSB_BHPZ_ID();
        if (SB_BHPZ_ID != null) {
            stmt.bindString(16, SB_BHPZ_ID);
        }
 
        String WJ_DW = entity.getWJ_DW();
        if (WJ_DW != null) {
            stmt.bindString(17, WJ_DW);
        }
 
        String WJ_LS_ID = entity.getWJ_LS_ID();
        if (WJ_LS_ID != null) {
            stmt.bindString(18, WJ_LS_ID);
        }
        stmt.bindLong(19, entity.getDXZJ());
 
        String SFXTLR = entity.getSFXTLR();
        if (SFXTLR != null) {
            stmt.bindString(20, SFXTLR);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RZGL readEntity(Cursor cursor, int offset) {
        RZGL entity = new RZGL( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DWMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CZR
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CZLX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CZSJ
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BBS
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // FLAGDYDZ
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SB
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // SBSJ
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SFBDSJ
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SB_LS_ID
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SBDW
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BZ
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // HZSJ
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // SBCZLX
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SB_BHPZ_ID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // WJ_DW
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // WJ_LS_ID
            cursor.getLong(offset + 18), // DXZJ
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // SFXTLR
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RZGL entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDWMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCZR(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCZLX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCZSJ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBBS(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFLAGDYDZ(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSB(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSBSJ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSFBDSJ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSB_LS_ID(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSBDW(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBZ(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setHZSJ(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSBCZLX(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSB_BHPZ_ID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWJ_DW(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWJ_LS_ID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDXZJ(cursor.getLong(offset + 18));
        entity.setSFXTLR(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RZGL entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RZGL entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RZGL entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
