package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.BDW;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BDW".
*/
public class BDWDao extends AbstractDao<BDW, Long> {

    public static final String TABLENAME = "BDW";

    /**
     * Properties of entity BDW.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property BDWNAME = new Property(1, String.class, "BDWNAME", false, "BDWNAME");
        public final static Property BZ = new Property(2, String.class, "BZ", false, "BZ");
        public final static Property SJDW = new Property(3, String.class, "SJDW", false, "SJDW");
        public final static Property BH = new Property(4, String.class, "BH", false, "BH");
        public final static Property DDDW = new Property(5, String.class, "DDDW", false, "DDDW");
        public final static Property DWJB = new Property(6, String.class, "DWJB", false, "DWJB");
    }


    public BDWDao(DaoConfig config) {
        super(config);
    }
    
    public BDWDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BDW entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BDWNAME = entity.getBDWNAME();
        if (BDWNAME != null) {
            stmt.bindString(2, BDWNAME);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(3, BZ);
        }
 
        String SJDW = entity.getSJDW();
        if (SJDW != null) {
            stmt.bindString(4, SJDW);
        }
 
        String BH = entity.getBH();
        if (BH != null) {
            stmt.bindString(5, BH);
        }
 
        String DDDW = entity.getDDDW();
        if (DDDW != null) {
            stmt.bindString(6, DDDW);
        }
 
        String DWJB = entity.getDWJB();
        if (DWJB != null) {
            stmt.bindString(7, DWJB);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BDW entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BDWNAME = entity.getBDWNAME();
        if (BDWNAME != null) {
            stmt.bindString(2, BDWNAME);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(3, BZ);
        }
 
        String SJDW = entity.getSJDW();
        if (SJDW != null) {
            stmt.bindString(4, SJDW);
        }
 
        String BH = entity.getBH();
        if (BH != null) {
            stmt.bindString(5, BH);
        }
 
        String DDDW = entity.getDDDW();
        if (DDDW != null) {
            stmt.bindString(6, DDDW);
        }
 
        String DWJB = entity.getDWJB();
        if (DWJB != null) {
            stmt.bindString(7, DWJB);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BDW readEntity(Cursor cursor, int offset) {
        BDW entity = new BDW( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BDWNAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BZ
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SJDW
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BH
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DDDW
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // DWJB
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BDW entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBDWNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBZ(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSJDW(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBH(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDDDW(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDWJB(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BDW entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BDW entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BDW entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
