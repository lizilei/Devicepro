package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.ZZCJ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZZCJ".
*/
public class ZZCJDao extends AbstractDao<ZZCJ, Long> {

    public static final String TABLENAME = "ZZCJ";

    /**
     * Properties of entity ZZCJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property MC = new Property(1, String.class, "MC", false, "MC");
        public final static Property BZ = new Property(2, String.class, "BZ", false, "BZ");
        public final static Property BH = new Property(3, String.class, "BH", false, "BH");
        public final static Property VF = new Property(4, int.class, "VF", false, "VF");
        public final static Property WZ = new Property(5, String.class, "WZ", false, "WZ");
        public final static Property CZR = new Property(6, String.class, "CZR", false, "CZR");
        public final static Property WDID = new Property(7, int.class, "WDID", false, "WDID");
        public final static Property CJBM = new Property(8, String.class, "CJBM", false, "CJBM");
        public final static Property SBXH = new Property(9, int.class, "SBXH", false, "SBXH");
        public final static Property ED_TAG = new Property(10, String.class, "ED_TAG", false, "ED_TAG");
    }


    public ZZCJDao(DaoConfig config) {
        super(config);
    }
    
    public ZZCJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZZCJ entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(2, MC);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(3, BZ);
        }
 
        String BH = entity.getBH();
        if (BH != null) {
            stmt.bindString(4, BH);
        }
        stmt.bindLong(5, entity.getVF());
 
        String WZ = entity.getWZ();
        if (WZ != null) {
            stmt.bindString(6, WZ);
        }
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(7, CZR);
        }
        stmt.bindLong(8, entity.getWDID());
 
        String CJBM = entity.getCJBM();
        if (CJBM != null) {
            stmt.bindString(9, CJBM);
        }
        stmt.bindLong(10, entity.getSBXH());
 
        String ED_TAG = entity.getED_TAG();
        if (ED_TAG != null) {
            stmt.bindString(11, ED_TAG);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZZCJ entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(2, MC);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(3, BZ);
        }
 
        String BH = entity.getBH();
        if (BH != null) {
            stmt.bindString(4, BH);
        }
        stmt.bindLong(5, entity.getVF());
 
        String WZ = entity.getWZ();
        if (WZ != null) {
            stmt.bindString(6, WZ);
        }
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(7, CZR);
        }
        stmt.bindLong(8, entity.getWDID());
 
        String CJBM = entity.getCJBM();
        if (CJBM != null) {
            stmt.bindString(9, CJBM);
        }
        stmt.bindLong(10, entity.getSBXH());
 
        String ED_TAG = entity.getED_TAG();
        if (ED_TAG != null) {
            stmt.bindString(11, ED_TAG);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZZCJ readEntity(Cursor cursor, int offset) {
        ZZCJ entity = new ZZCJ( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BZ
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BH
            cursor.getInt(offset + 4), // VF
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // WZ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CZR
            cursor.getInt(offset + 7), // WDID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // CJBM
            cursor.getInt(offset + 9), // SBXH
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // ED_TAG
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZZCJ entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBZ(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVF(cursor.getInt(offset + 4));
        entity.setWZ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCZR(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWDID(cursor.getInt(offset + 7));
        entity.setCJBM(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSBXH(cursor.getInt(offset + 9));
        entity.setED_TAG(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZZCJ entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZZCJ entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZZCJ entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
