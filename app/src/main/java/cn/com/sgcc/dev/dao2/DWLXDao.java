package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.DWLX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DWLX".
*/
public class DWLXDao extends AbstractDao<DWLX, Long> {

    public static final String TABLENAME = "DWLX";

    /**
     * Properties of entity DWLX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property DWMC = new Property(1, String.class, "DWMC", false, "DWMC");
        public final static Property BZ = new Property(2, String.class, "BZ", false, "BZ");
        public final static Property DWLX = new Property(3, String.class, "DWLX", false, "DWLX");
        public final static Property VF = new Property(4, int.class, "VF", false, "VF");
        public final static Property MC = new Property(5, String.class, "MC", false, "MC");
        public final static Property CZR = new Property(6, String.class, "CZR", false, "CZR");
        public final static Property WDID = new Property(7, int.class, "WDID", false, "WDID");
    }


    public DWLXDao(DaoConfig config) {
        super(config);
    }
    
    public DWLXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DWLX entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String DWMC = entity.getDWMC();
        if (DWMC != null) {
            stmt.bindString(2, DWMC);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(3, BZ);
        }
 
        String DWLX = entity.getDWLX();
        if (DWLX != null) {
            stmt.bindString(4, DWLX);
        }
        stmt.bindLong(5, entity.getVF());
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(6, MC);
        }
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(7, CZR);
        }
        stmt.bindLong(8, entity.getWDID());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DWLX entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String DWMC = entity.getDWMC();
        if (DWMC != null) {
            stmt.bindString(2, DWMC);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(3, BZ);
        }
 
        String DWLX = entity.getDWLX();
        if (DWLX != null) {
            stmt.bindString(4, DWLX);
        }
        stmt.bindLong(5, entity.getVF());
 
        String MC = entity.getMC();
        if (MC != null) {
            stmt.bindString(6, MC);
        }
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(7, CZR);
        }
        stmt.bindLong(8, entity.getWDID());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DWLX readEntity(Cursor cursor, int offset) {
        DWLX entity = new DWLX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // DWMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BZ
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DWLX
            cursor.getInt(offset + 4), // VF
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // MC
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CZR
            cursor.getInt(offset + 7) // WDID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DWLX entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDWMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBZ(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDWLX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVF(cursor.getInt(offset + 4));
        entity.setMC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCZR(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWDID(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DWLX entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DWLX entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DWLX entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
