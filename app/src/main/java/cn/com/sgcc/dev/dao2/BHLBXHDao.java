package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.BHLBXH;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BHLBXH".
*/
public class BHLBXHDao extends AbstractDao<BHLBXH, Long> {

    public static final String TABLENAME = "BHLBXH";

    /**
     * Properties of entity BHLBXH.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Bhlb = new Property(1, String.class, "bhlb", false, "BHLB");
        public final static Property Bhlbxh = new Property(2, String.class, "bhlbxh", false, "BHLBXH");
        public final static Property Bz = new Property(3, String.class, "bz", false, "BZ");
    }


    public BHLBXHDao(DaoConfig config) {
        super(config);
    }
    
    public BHLBXHDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BHLBXH entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bhlb = entity.getBhlb();
        if (bhlb != null) {
            stmt.bindString(2, bhlb);
        }
 
        String bhlbxh = entity.getBhlbxh();
        if (bhlbxh != null) {
            stmt.bindString(3, bhlbxh);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(4, bz);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BHLBXH entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bhlb = entity.getBhlb();
        if (bhlb != null) {
            stmt.bindString(2, bhlb);
        }
 
        String bhlbxh = entity.getBhlbxh();
        if (bhlbxh != null) {
            stmt.bindString(3, bhlbxh);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(4, bz);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BHLBXH readEntity(Cursor cursor, int offset) {
        BHLBXH entity = new BHLBXH( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bhlb
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bhlbxh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // bz
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BHLBXH entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBhlb(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBhlbxh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBz(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BHLBXH entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BHLBXH entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BHLBXH entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
