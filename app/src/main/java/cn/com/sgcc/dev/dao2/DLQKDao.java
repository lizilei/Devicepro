package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.DLQK;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DLQK".
*/
public class DLQKDao extends AbstractDao<DLQK, Long> {

    public static final String TABLENAME = "DLQK";

    /**
     * Properties of entity DLQK.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Logintime = new Property(1, String.class, "logintime", false, "LOGINTIME");
        public final static Property Loginip = new Property(2, String.class, "loginip", false, "LOGINIP");
        public final static Property Userid = new Property(3, long.class, "userid", false, "USERID");
        public final static Property Username = new Property(4, String.class, "username", false, "USERNAME");
        public final static Property Ssgs = new Property(5, String.class, "ssgs", false, "SSGS");
    }


    public DLQKDao(DaoConfig config) {
        super(config);
    }
    
    public DLQKDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DLQK entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String logintime = entity.getLogintime();
        if (logintime != null) {
            stmt.bindString(2, logintime);
        }
 
        String loginip = entity.getLoginip();
        if (loginip != null) {
            stmt.bindString(3, loginip);
        }
        stmt.bindLong(4, entity.getUserid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String ssgs = entity.getSsgs();
        if (ssgs != null) {
            stmt.bindString(6, ssgs);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DLQK entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String logintime = entity.getLogintime();
        if (logintime != null) {
            stmt.bindString(2, logintime);
        }
 
        String loginip = entity.getLoginip();
        if (loginip != null) {
            stmt.bindString(3, loginip);
        }
        stmt.bindLong(4, entity.getUserid());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(5, username);
        }
 
        String ssgs = entity.getSsgs();
        if (ssgs != null) {
            stmt.bindString(6, ssgs);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DLQK readEntity(Cursor cursor, int offset) {
        DLQK entity = new DLQK( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logintime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginip
            cursor.getLong(offset + 3), // userid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // username
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // ssgs
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DLQK entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogintime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginip(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserid(cursor.getLong(offset + 3));
        entity.setUsername(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSsgs(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DLQK entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DLQK entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DLQK entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
