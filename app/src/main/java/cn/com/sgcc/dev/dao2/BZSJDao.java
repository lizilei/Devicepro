package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.BZSJ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZSJ".
*/
public class BZSJDao extends AbstractDao<BZSJ, Long> {

    public static final String TABLENAME = "BZSJ";

    /**
     * Properties of entity BZSJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property BzsjSxmc = new Property(1, String.class, "bzsjSxmc", false, "BZSJSXMC");
        public final static Property Bz = new Property(2, String.class, "bz", false, "BZ");
        public final static Property BzsjflId = new Property(3, int.class, "bzsjflId", false, "BZSJFLID");
        public final static Property BzsjIndex = new Property(4, int.class, "bzsjIndex", false, "BZSJINDEX");
    }


    public BZSJDao(DaoConfig config) {
        super(config);
    }
    
    public BZSJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BZSJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bzsjSxmc = entity.getBzsjSxmc();
        if (bzsjSxmc != null) {
            stmt.bindString(2, bzsjSxmc);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(3, bz);
        }
        stmt.bindLong(4, entity.getBzsjflId());
        stmt.bindLong(5, entity.getBzsjIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BZSJ entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bzsjSxmc = entity.getBzsjSxmc();
        if (bzsjSxmc != null) {
            stmt.bindString(2, bzsjSxmc);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(3, bz);
        }
        stmt.bindLong(4, entity.getBzsjflId());
        stmt.bindLong(5, entity.getBzsjIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BZSJ readEntity(Cursor cursor, int offset) {
        BZSJ entity = new BZSJ( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bzsjSxmc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bz
            cursor.getInt(offset + 3), // bzsjflId
            cursor.getInt(offset + 4) // bzsjIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BZSJ entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBzsjSxmc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBz(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBzsjflId(cursor.getInt(offset + 3));
        entity.setBzsjIndex(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BZSJ entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BZSJ entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BZSJ entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
