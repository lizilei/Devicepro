package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.DWJC;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DWJC".
*/
public class DWJCDao extends AbstractDao<DWJC, Long> {

    public static final String TABLENAME = "DWJC";

    /**
     * Properties of entity DWJC.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property BH = new Property(1, String.class, "BH", false, "BH");
        public final static Property DWJC = new Property(2, String.class, "DWJC", false, "DWJC");
        public final static Property DDDW = new Property(3, String.class, "DDDW", false, "DDDW");
        public final static Property VF = new Property(4, int.class, "VF", false, "VF");
        public final static Property CZR = new Property(5, String.class, "CZR", false, "CZR");
        public final static Property WDID = new Property(6, int.class, "WDID", false, "WDID");
        public final static Property SSQY = new Property(7, String.class, "SSQY", false, "SSQY");
        public final static Property QYBH = new Property(8, float.class, "QYBH", false, "QYBH");
    }


    public DWJCDao(DaoConfig config) {
        super(config);
    }
    
    public DWJCDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DWJC entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BH = entity.getBH();
        if (BH != null) {
            stmt.bindString(2, BH);
        }
 
        String DWJC = entity.getDWJC();
        if (DWJC != null) {
            stmt.bindString(3, DWJC);
        }
 
        String DDDW = entity.getDDDW();
        if (DDDW != null) {
            stmt.bindString(4, DDDW);
        }
        stmt.bindLong(5, entity.getVF());
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(6, CZR);
        }
        stmt.bindLong(7, entity.getWDID());
 
        String SSQY = entity.getSSQY();
        if (SSQY != null) {
            stmt.bindString(8, SSQY);
        }
        stmt.bindDouble(9, entity.getQYBH());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DWJC entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BH = entity.getBH();
        if (BH != null) {
            stmt.bindString(2, BH);
        }
 
        String DWJC = entity.getDWJC();
        if (DWJC != null) {
            stmt.bindString(3, DWJC);
        }
 
        String DDDW = entity.getDDDW();
        if (DDDW != null) {
            stmt.bindString(4, DDDW);
        }
        stmt.bindLong(5, entity.getVF());
 
        String CZR = entity.getCZR();
        if (CZR != null) {
            stmt.bindString(6, CZR);
        }
        stmt.bindLong(7, entity.getWDID());
 
        String SSQY = entity.getSSQY();
        if (SSQY != null) {
            stmt.bindString(8, SSQY);
        }
        stmt.bindDouble(9, entity.getQYBH());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DWJC readEntity(Cursor cursor, int offset) {
        DWJC entity = new DWJC( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BH
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DWJC
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // DDDW
            cursor.getInt(offset + 4), // VF
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CZR
            cursor.getInt(offset + 6), // WDID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SSQY
            cursor.getFloat(offset + 8) // QYBH
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DWJC entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDWJC(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDDDW(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVF(cursor.getInt(offset + 4));
        entity.setCZR(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWDID(cursor.getInt(offset + 6));
        entity.setSSQY(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQYBH(cursor.getFloat(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DWJC entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DWJC entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DWJC entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
