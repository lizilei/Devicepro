package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.ycsb.JGCS;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JGCS".
*/
public class JGCSDao extends AbstractDao<JGCS, Integer> {

    public static final String TABLENAME = "JGCS";

    /**
     * Properties of entity JGCS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Dwmc = new Property(1, String.class, "dwmc", false, "DWMC");
        public final static Property Czmc = new Property(2, String.class, "czmc", false, "CZMC");
        public final static Property Jgmc = new Property(3, String.class, "jgmc", false, "JGMC");
        public final static Property Jglx = new Property(4, String.class, "jglx", false, "JGLX");
        public final static Property Dydj = new Property(5, int.class, "dydj", false, "DYDJ");
        public final static Property Bz = new Property(6, String.class, "bz", false, "BZ");
        public final static Property Sh = new Property(7, String.class, "sh", false, "SH");
        public final static Property Shyy = new Property(8, String.class, "shyy", false, "SHYY");
        public final static Property Tjr = new Property(9, String.class, "tjr", false, "TJR");
        public final static Property Dwtjr = new Property(10, String.class, "dwtjr", false, "DWTJR");
        public final static Property Czr = new Property(11, String.class, "czr", false, "CZR");
        public final static Property Shr = new Property(12, String.class, "shr", false, "SHR");
        public final static Property Sftcyx = new Property(13, String.class, "sftcyx", false, "SFTCYX");
        public final static Property Wdid = new Property(14, int.class, "wdid", false, "WDID");
        public final static Property Gldw = new Property(15, String.class, "gldw", false, "GLDW");
        public final static Property Dddw = new Property(16, String.class, "dddw", false, "DDDW");
        public final static Property Tcyxsj = new Property(17, java.util.Date.class, "tcyxsj", false, "TCYXSJ");
        public final static Property Sfbdsj = new Property(18, String.class, "sfbdsj", false, "SFBDSJ");
        public final static Property Objid = new Property(19, String.class, "objid", false, "OBJID");
    }


    public JGCSDao(DaoConfig config) {
        super(config);
    }
    
    public JGCSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JGCS entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String dwmc = entity.getDwmc();
        if (dwmc != null) {
            stmt.bindString(2, dwmc);
        }
 
        String czmc = entity.getCzmc();
        if (czmc != null) {
            stmt.bindString(3, czmc);
        }
 
        String jgmc = entity.getJgmc();
        if (jgmc != null) {
            stmt.bindString(4, jgmc);
        }
 
        String jglx = entity.getJglx();
        if (jglx != null) {
            stmt.bindString(5, jglx);
        }
        stmt.bindLong(6, entity.getDydj());
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(7, bz);
        }
 
        String sh = entity.getSh();
        if (sh != null) {
            stmt.bindString(8, sh);
        }
 
        String shyy = entity.getShyy();
        if (shyy != null) {
            stmt.bindString(9, shyy);
        }
 
        String tjr = entity.getTjr();
        if (tjr != null) {
            stmt.bindString(10, tjr);
        }
 
        String dwtjr = entity.getDwtjr();
        if (dwtjr != null) {
            stmt.bindString(11, dwtjr);
        }
 
        String czr = entity.getCzr();
        if (czr != null) {
            stmt.bindString(12, czr);
        }
 
        String shr = entity.getShr();
        if (shr != null) {
            stmt.bindString(13, shr);
        }
 
        String sftcyx = entity.getSftcyx();
        if (sftcyx != null) {
            stmt.bindString(14, sftcyx);
        }
        stmt.bindLong(15, entity.getWdid());
 
        String gldw = entity.getGldw();
        if (gldw != null) {
            stmt.bindString(16, gldw);
        }
 
        String dddw = entity.getDddw();
        if (dddw != null) {
            stmt.bindString(17, dddw);
        }
 
        java.util.Date tcyxsj = entity.getTcyxsj();
        if (tcyxsj != null) {
            stmt.bindLong(18, tcyxsj.getTime());
        }
 
        String sfbdsj = entity.getSfbdsj();
        if (sfbdsj != null) {
            stmt.bindString(19, sfbdsj);
        }
 
        String objid = entity.getObjid();
        if (objid != null) {
            stmt.bindString(20, objid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JGCS entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String dwmc = entity.getDwmc();
        if (dwmc != null) {
            stmt.bindString(2, dwmc);
        }
 
        String czmc = entity.getCzmc();
        if (czmc != null) {
            stmt.bindString(3, czmc);
        }
 
        String jgmc = entity.getJgmc();
        if (jgmc != null) {
            stmt.bindString(4, jgmc);
        }
 
        String jglx = entity.getJglx();
        if (jglx != null) {
            stmt.bindString(5, jglx);
        }
        stmt.bindLong(6, entity.getDydj());
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(7, bz);
        }
 
        String sh = entity.getSh();
        if (sh != null) {
            stmt.bindString(8, sh);
        }
 
        String shyy = entity.getShyy();
        if (shyy != null) {
            stmt.bindString(9, shyy);
        }
 
        String tjr = entity.getTjr();
        if (tjr != null) {
            stmt.bindString(10, tjr);
        }
 
        String dwtjr = entity.getDwtjr();
        if (dwtjr != null) {
            stmt.bindString(11, dwtjr);
        }
 
        String czr = entity.getCzr();
        if (czr != null) {
            stmt.bindString(12, czr);
        }
 
        String shr = entity.getShr();
        if (shr != null) {
            stmt.bindString(13, shr);
        }
 
        String sftcyx = entity.getSftcyx();
        if (sftcyx != null) {
            stmt.bindString(14, sftcyx);
        }
        stmt.bindLong(15, entity.getWdid());
 
        String gldw = entity.getGldw();
        if (gldw != null) {
            stmt.bindString(16, gldw);
        }
 
        String dddw = entity.getDddw();
        if (dddw != null) {
            stmt.bindString(17, dddw);
        }
 
        java.util.Date tcyxsj = entity.getTcyxsj();
        if (tcyxsj != null) {
            stmt.bindLong(18, tcyxsj.getTime());
        }
 
        String sfbdsj = entity.getSfbdsj();
        if (sfbdsj != null) {
            stmt.bindString(19, sfbdsj);
        }
 
        String objid = entity.getObjid();
        if (objid != null) {
            stmt.bindString(20, objid);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public JGCS readEntity(Cursor cursor, int offset) {
        JGCS entity = new JGCS( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dwmc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // czmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jgmc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jglx
            cursor.getInt(offset + 5), // dydj
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bz
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sh
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shyy
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tjr
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dwtjr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // czr
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shr
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sftcyx
            cursor.getInt(offset + 14), // wdid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // gldw
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dddw
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)), // tcyxsj
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // sfbdsj
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // objid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JGCS entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setDwmc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCzmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJgmc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJglx(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDydj(cursor.getInt(offset + 5));
        entity.setBz(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSh(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShyy(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTjr(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDwtjr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCzr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShr(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSftcyx(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWdid(cursor.getInt(offset + 14));
        entity.setGldw(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDddw(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTcyxsj(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
        entity.setSfbdsj(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setObjid(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(JGCS entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(JGCS entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JGCS entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
