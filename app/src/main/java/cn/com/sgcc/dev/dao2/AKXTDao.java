package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.AKXT;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AKXT".
*/
public class AKXTDao extends AbstractDao<AKXT, Long> {

    public static final String TABLENAME = "AKXT";

    /**
     * Properties of entity AKXT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Akxtm = new Property(1, String.class, "akxtm", false, "AKXTM");
        public final static Property Ssddm = new Property(2, String.class, "ssddm", false, "SSDDM");
        public final static Property Akxtdydj = new Property(3, long.class, "akxtdydj", false, "AKXTDYDJ");
        public final static Property Czr = new Property(4, String.class, "czr", false, "CZR");
        public final static Property Sb = new Property(5, String.class, "sb", false, "SB");
        public final static Property Sbsj = new Property(6, String.class, "sbsj", false, "SBSJ");
        public final static Property Sfbdsj = new Property(7, String.class, "sfbdsj", false, "SFBDSJ");
        public final static Property Sb_ls_id = new Property(8, String.class, "sb_ls_id", false, "SB_LS_ID");
        public final static Property Sbdw = new Property(9, String.class, "sbdw", false, "SBDW");
        public final static Property Hzsj = new Property(10, String.class, "hzsj", false, "HZSJ");
        public final static Property Sbczlx = new Property(11, String.class, "sbczlx", false, "SBCZLX");
        public final static Property Wj_dw = new Property(12, String.class, "wj_dw", false, "WJ_DW");
        public final static Property Wj_ls_id = new Property(13, String.class, "wj_ls_id", false, "WJ_LS_ID");
        public final static Property Sfxtlr = new Property(14, String.class, "sfxtlr", false, "SFXTLR");
    }


    public AKXTDao(DaoConfig config) {
        super(config);
    }
    
    public AKXTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AKXT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String akxtm = entity.getAkxtm();
        if (akxtm != null) {
            stmt.bindString(2, akxtm);
        }
 
        String ssddm = entity.getSsddm();
        if (ssddm != null) {
            stmt.bindString(3, ssddm);
        }
        stmt.bindLong(4, entity.getAkxtdydj());
 
        String czr = entity.getCzr();
        if (czr != null) {
            stmt.bindString(5, czr);
        }
 
        String sb = entity.getSb();
        if (sb != null) {
            stmt.bindString(6, sb);
        }
 
        String sbsj = entity.getSbsj();
        if (sbsj != null) {
            stmt.bindString(7, sbsj);
        }
 
        String sfbdsj = entity.getSfbdsj();
        if (sfbdsj != null) {
            stmt.bindString(8, sfbdsj);
        }
 
        String sb_ls_id = entity.getSb_ls_id();
        if (sb_ls_id != null) {
            stmt.bindString(9, sb_ls_id);
        }
 
        String sbdw = entity.getSbdw();
        if (sbdw != null) {
            stmt.bindString(10, sbdw);
        }
 
        String hzsj = entity.getHzsj();
        if (hzsj != null) {
            stmt.bindString(11, hzsj);
        }
 
        String sbczlx = entity.getSbczlx();
        if (sbczlx != null) {
            stmt.bindString(12, sbczlx);
        }
 
        String wj_dw = entity.getWj_dw();
        if (wj_dw != null) {
            stmt.bindString(13, wj_dw);
        }
 
        String wj_ls_id = entity.getWj_ls_id();
        if (wj_ls_id != null) {
            stmt.bindString(14, wj_ls_id);
        }
 
        String sfxtlr = entity.getSfxtlr();
        if (sfxtlr != null) {
            stmt.bindString(15, sfxtlr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AKXT entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String akxtm = entity.getAkxtm();
        if (akxtm != null) {
            stmt.bindString(2, akxtm);
        }
 
        String ssddm = entity.getSsddm();
        if (ssddm != null) {
            stmt.bindString(3, ssddm);
        }
        stmt.bindLong(4, entity.getAkxtdydj());
 
        String czr = entity.getCzr();
        if (czr != null) {
            stmt.bindString(5, czr);
        }
 
        String sb = entity.getSb();
        if (sb != null) {
            stmt.bindString(6, sb);
        }
 
        String sbsj = entity.getSbsj();
        if (sbsj != null) {
            stmt.bindString(7, sbsj);
        }
 
        String sfbdsj = entity.getSfbdsj();
        if (sfbdsj != null) {
            stmt.bindString(8, sfbdsj);
        }
 
        String sb_ls_id = entity.getSb_ls_id();
        if (sb_ls_id != null) {
            stmt.bindString(9, sb_ls_id);
        }
 
        String sbdw = entity.getSbdw();
        if (sbdw != null) {
            stmt.bindString(10, sbdw);
        }
 
        String hzsj = entity.getHzsj();
        if (hzsj != null) {
            stmt.bindString(11, hzsj);
        }
 
        String sbczlx = entity.getSbczlx();
        if (sbczlx != null) {
            stmt.bindString(12, sbczlx);
        }
 
        String wj_dw = entity.getWj_dw();
        if (wj_dw != null) {
            stmt.bindString(13, wj_dw);
        }
 
        String wj_ls_id = entity.getWj_ls_id();
        if (wj_ls_id != null) {
            stmt.bindString(14, wj_ls_id);
        }
 
        String sfxtlr = entity.getSfxtlr();
        if (sfxtlr != null) {
            stmt.bindString(15, sfxtlr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AKXT readEntity(Cursor cursor, int offset) {
        AKXT entity = new AKXT( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // akxtm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ssddm
            cursor.getLong(offset + 3), // akxtdydj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // czr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sb
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sbsj
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sfbdsj
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sb_ls_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sbdw
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hzsj
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sbczlx
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // wj_dw
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // wj_ls_id
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // sfxtlr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AKXT entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAkxtm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSsddm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAkxtdydj(cursor.getLong(offset + 3));
        entity.setCzr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSb(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSbsj(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSfbdsj(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSb_ls_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSbdw(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHzsj(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSbczlx(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWj_dw(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWj_ls_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSfxtlr(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AKXT entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AKXT entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AKXT entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
