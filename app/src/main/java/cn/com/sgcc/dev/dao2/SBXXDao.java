package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.SBXX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SBXX".
*/
public class SBXXDao extends AbstractDao<SBXX, Long> {

    public static final String TABLENAME = "SBXX";

    /**
     * Properties of entity SBXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property ANDROID_ID = new Property(2, String.class, "ANDROID_ID", false, "ANDROID_ID");
        public final static Property SerialNumber = new Property(3, String.class, "SerialNumber", false, "SERIALNUMBER");
        public final static Property Sbwybdsbm = new Property(4, String.class, "sbwybdsbm", false, "SBWYBDSBM");
        public final static Property SJWJSJ = new Property(5, String.class, "SJWJSJ", false, "SJWJSJ");
        public final static Property SFJG = new Property(6, String.class, "SFJG", false, "SFJG");
    }


    public SBXXDao(DaoConfig config) {
        super(config);
    }
    
    public SBXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SBXX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String ANDROID_ID = entity.getANDROID_ID();
        if (ANDROID_ID != null) {
            stmt.bindString(3, ANDROID_ID);
        }
 
        String SerialNumber = entity.getSerialNumber();
        if (SerialNumber != null) {
            stmt.bindString(4, SerialNumber);
        }
 
        String sbwybdsbm = entity.getSbwybdsbm();
        if (sbwybdsbm != null) {
            stmt.bindString(5, sbwybdsbm);
        }
 
        String SJWJSJ = entity.getSJWJSJ();
        if (SJWJSJ != null) {
            stmt.bindString(6, SJWJSJ);
        }
 
        String SFJG = entity.getSFJG();
        if (SFJG != null) {
            stmt.bindString(7, SFJG);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SBXX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String ANDROID_ID = entity.getANDROID_ID();
        if (ANDROID_ID != null) {
            stmt.bindString(3, ANDROID_ID);
        }
 
        String SerialNumber = entity.getSerialNumber();
        if (SerialNumber != null) {
            stmt.bindString(4, SerialNumber);
        }
 
        String sbwybdsbm = entity.getSbwybdsbm();
        if (sbwybdsbm != null) {
            stmt.bindString(5, sbwybdsbm);
        }
 
        String SJWJSJ = entity.getSJWJSJ();
        if (SJWJSJ != null) {
            stmt.bindString(6, SJWJSJ);
        }
 
        String SFJG = entity.getSFJG();
        if (SFJG != null) {
            stmt.bindString(7, SFJG);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SBXX readEntity(Cursor cursor, int offset) {
        SBXX entity = new SBXX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ANDROID_ID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // SerialNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sbwybdsbm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SJWJSJ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // SFJG
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SBXX entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setANDROID_ID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerialNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSbwybdsbm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSJWJSJ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSFJG(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SBXX entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SBXX entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SBXX entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
