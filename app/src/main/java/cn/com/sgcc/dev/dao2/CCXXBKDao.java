package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.CCXXBK;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CCXXBK".
*/
public class CCXXBKDao extends AbstractDao<CCXXBK, Long> {

    public static final String TABLENAME = "CCXXBK";

    /**
     * Properties of entity CCXXBK.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Xh = new Property(1, long.class, "xh", false, "XH");
        public final static Property Sfsbm = new Property(2, String.class, "sfsbm", false, "SFSBM");
        public final static Property Zzcj = new Property(3, String.class, "zzcj", false, "ZZCJ");
        public final static Property Bkxh = new Property(4, String.class, "bkxh", false, "BKXH");
        public final static Property Bklb = new Property(5, String.class, "bklb", false, "BKLB");
        public final static Property Rjbb = new Property(6, String.class, "rjbb", false, "RJBB");
        public final static Property Bkbh = new Property(7, String.class, "bkbh", false, "BKBH");
        public final static Property Bkscrq = new Property(8, String.class, "bkscrq", false, "BKSCRQ");
    }


    public CCXXBKDao(DaoConfig config) {
        super(config);
    }
    
    public CCXXBKDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CCXXBK entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getXh());
 
        String sfsbm = entity.getSfsbm();
        if (sfsbm != null) {
            stmt.bindString(3, sfsbm);
        }
 
        String zzcj = entity.getZzcj();
        if (zzcj != null) {
            stmt.bindString(4, zzcj);
        }
 
        String bkxh = entity.getBkxh();
        if (bkxh != null) {
            stmt.bindString(5, bkxh);
        }
 
        String bklb = entity.getBklb();
        if (bklb != null) {
            stmt.bindString(6, bklb);
        }
 
        String rjbb = entity.getRjbb();
        if (rjbb != null) {
            stmt.bindString(7, rjbb);
        }
 
        String bkbh = entity.getBkbh();
        if (bkbh != null) {
            stmt.bindString(8, bkbh);
        }
 
        String bkscrq = entity.getBkscrq();
        if (bkscrq != null) {
            stmt.bindString(9, bkscrq);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CCXXBK entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getXh());
 
        String sfsbm = entity.getSfsbm();
        if (sfsbm != null) {
            stmt.bindString(3, sfsbm);
        }
 
        String zzcj = entity.getZzcj();
        if (zzcj != null) {
            stmt.bindString(4, zzcj);
        }
 
        String bkxh = entity.getBkxh();
        if (bkxh != null) {
            stmt.bindString(5, bkxh);
        }
 
        String bklb = entity.getBklb();
        if (bklb != null) {
            stmt.bindString(6, bklb);
        }
 
        String rjbb = entity.getRjbb();
        if (rjbb != null) {
            stmt.bindString(7, rjbb);
        }
 
        String bkbh = entity.getBkbh();
        if (bkbh != null) {
            stmt.bindString(8, bkbh);
        }
 
        String bkscrq = entity.getBkscrq();
        if (bkscrq != null) {
            stmt.bindString(9, bkscrq);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CCXXBK readEntity(Cursor cursor, int offset) {
        CCXXBK entity = new CCXXBK( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // xh
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sfsbm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zzcj
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bkxh
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bklb
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // rjbb
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bkbh
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // bkscrq
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CCXXBK entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXh(cursor.getLong(offset + 1));
        entity.setSfsbm(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZzcj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBkxh(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBklb(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRjbb(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBkbh(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBkscrq(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CCXXBK entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CCXXBK entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CCXXBK entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
