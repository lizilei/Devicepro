package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.CCXXRJBB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CCXXRJBB".
*/
public class CCXXRJBBDao extends AbstractDao<CCXXRJBB, Long> {

    public static final String TABLENAME = "CCXXRJBB";

    /**
     * Properties of entity CCXXRJBB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Sfsbm = new Property(1, String.class, "sfsbm", false, "SFSBM");
        public final static Property Mkmc = new Property(2, String.class, "mkmc", false, "MKMC");
        public final static Property Rjbb = new Property(3, String.class, "rjbb", false, "RJBB");
        public final static Property Jym = new Property(4, String.class, "jym", false, "JYM");
        public final static Property Scrq = new Property(5, String.class, "scrq", false, "SCRQ");
        public final static Property Code = new Property(6, String.class, "code", false, "CODE");
    }


    public CCXXRJBBDao(DaoConfig config) {
        super(config);
    }
    
    public CCXXRJBBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CCXXRJBB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String sfsbm = entity.getSfsbm();
        if (sfsbm != null) {
            stmt.bindString(2, sfsbm);
        }
 
        String mkmc = entity.getMkmc();
        if (mkmc != null) {
            stmt.bindString(3, mkmc);
        }
 
        String rjbb = entity.getRjbb();
        if (rjbb != null) {
            stmt.bindString(4, rjbb);
        }
 
        String jym = entity.getJym();
        if (jym != null) {
            stmt.bindString(5, jym);
        }
 
        String scrq = entity.getScrq();
        if (scrq != null) {
            stmt.bindString(6, scrq);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CCXXRJBB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String sfsbm = entity.getSfsbm();
        if (sfsbm != null) {
            stmt.bindString(2, sfsbm);
        }
 
        String mkmc = entity.getMkmc();
        if (mkmc != null) {
            stmt.bindString(3, mkmc);
        }
 
        String rjbb = entity.getRjbb();
        if (rjbb != null) {
            stmt.bindString(4, rjbb);
        }
 
        String jym = entity.getJym();
        if (jym != null) {
            stmt.bindString(5, jym);
        }
 
        String scrq = entity.getScrq();
        if (scrq != null) {
            stmt.bindString(6, scrq);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CCXXRJBB readEntity(Cursor cursor, int offset) {
        CCXXRJBB entity = new CCXXRJBB( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sfsbm
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mkmc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rjbb
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jym
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // scrq
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CCXXRJBB entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSfsbm(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMkmc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRjbb(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJym(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setScrq(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CCXXRJBB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CCXXRJBB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CCXXRJBB entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
