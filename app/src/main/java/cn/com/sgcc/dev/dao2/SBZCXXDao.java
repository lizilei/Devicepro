package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.SBZCXX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SBZCXX".
*/
public class SBZCXXDao extends AbstractDao<SBZCXX, Long> {

    public static final String TABLENAME = "SBZCXX";

    /**
     * Properties of entity SBZCXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property Android_id = new Property(2, String.class, "android_id", false, "ANDROID_ID");
        public final static Property Serialnumber = new Property(3, String.class, "serialnumber", false, "SERIALNUMBER");
        public final static Property Sqsj = new Property(4, String.class, "sqsj", false, "SQSJ");
        public final static Property Sqr = new Property(5, String.class, "sqr", false, "SQR");
        public final static Property Sqgs = new Property(6, String.class, "sqgs", false, "SQGS");
        public final static Property Ssdw = new Property(7, String.class, "ssdw", false, "SSDW");
        public final static Property Czmc = new Property(8, String.class, "czmc", false, "CZMC");
        public final static Property Czgldw = new Property(9, String.class, "czgldw", false, "CZGLDW");
        public final static Property Zcm = new Property(10, String.class, "zcm", false, "ZCM");
        public final static Property Bz = new Property(11, String.class, "bz", false, "BZ");
    }


    public SBZCXXDao(DaoConfig config) {
        super(config);
    }
    
    public SBZCXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SBZCXX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String android_id = entity.getAndroid_id();
        if (android_id != null) {
            stmt.bindString(3, android_id);
        }
 
        String serialnumber = entity.getSerialnumber();
        if (serialnumber != null) {
            stmt.bindString(4, serialnumber);
        }
 
        String sqsj = entity.getSqsj();
        if (sqsj != null) {
            stmt.bindString(5, sqsj);
        }
 
        String sqr = entity.getSqr();
        if (sqr != null) {
            stmt.bindString(6, sqr);
        }
 
        String sqgs = entity.getSqgs();
        if (sqgs != null) {
            stmt.bindString(7, sqgs);
        }
 
        String ssdw = entity.getSsdw();
        if (ssdw != null) {
            stmt.bindString(8, ssdw);
        }
 
        String czmc = entity.getCzmc();
        if (czmc != null) {
            stmt.bindString(9, czmc);
        }
 
        String czgldw = entity.getCzgldw();
        if (czgldw != null) {
            stmt.bindString(10, czgldw);
        }
 
        String zcm = entity.getZcm();
        if (zcm != null) {
            stmt.bindString(11, zcm);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(12, bz);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SBZCXX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
 
        String android_id = entity.getAndroid_id();
        if (android_id != null) {
            stmt.bindString(3, android_id);
        }
 
        String serialnumber = entity.getSerialnumber();
        if (serialnumber != null) {
            stmt.bindString(4, serialnumber);
        }
 
        String sqsj = entity.getSqsj();
        if (sqsj != null) {
            stmt.bindString(5, sqsj);
        }
 
        String sqr = entity.getSqr();
        if (sqr != null) {
            stmt.bindString(6, sqr);
        }
 
        String sqgs = entity.getSqgs();
        if (sqgs != null) {
            stmt.bindString(7, sqgs);
        }
 
        String ssdw = entity.getSsdw();
        if (ssdw != null) {
            stmt.bindString(8, ssdw);
        }
 
        String czmc = entity.getCzmc();
        if (czmc != null) {
            stmt.bindString(9, czmc);
        }
 
        String czgldw = entity.getCzgldw();
        if (czgldw != null) {
            stmt.bindString(10, czgldw);
        }
 
        String zcm = entity.getZcm();
        if (zcm != null) {
            stmt.bindString(11, zcm);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(12, bz);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SBZCXX readEntity(Cursor cursor, int offset) {
        SBZCXX entity = new SBZCXX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // android_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serialnumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sqsj
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sqr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sqgs
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ssdw
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // czmc
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // czgldw
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // zcm
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // bz
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SBZCXX entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAndroid_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerialnumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSqsj(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSqr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSqgs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSsdw(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCzmc(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCzgldw(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setZcm(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBz(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SBZCXX entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SBZCXX entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SBZCXX entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
