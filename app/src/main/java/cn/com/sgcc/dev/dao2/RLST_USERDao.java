package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.RLST_USER;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RLST_USER".
*/
public class RLST_USERDao extends AbstractDao<RLST_USER, Integer> {

    public static final String TABLENAME = "RLST_USER";

    /**
     * Properties of entity RLST_USER.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Gw = new Property(1, String.class, "gw", false, "GW");
        public final static Property Zw = new Property(2, String.class, "zw", false, "ZW");
        public final static Property Gzxz = new Property(3, String.class, "gzxz", false, "GZXZ");
        public final static Property Gltz = new Property(4, String.class, "gltz", false, "GLTZ");
        public final static Property Ssbm = new Property(5, String.class, "ssbm", false, "SSBM");
        public final static Property Ssgs = new Property(6, String.class, "ssgs", false, "SSGS");
        public final static Property UserName = new Property(7, String.class, "userName", false, "USERNAME");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property PhoneNumber = new Property(10, String.class, "phoneNumber", false, "PHONENUMBER");
        public final static Property Dwjb = new Property(11, String.class, "dwjb", false, "DWJB");
    }


    public RLST_USERDao(DaoConfig config) {
        super(config);
    }
    
    public RLST_USERDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RLST_USER entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String gw = entity.getGw();
        if (gw != null) {
            stmt.bindString(2, gw);
        }
 
        String zw = entity.getZw();
        if (zw != null) {
            stmt.bindString(3, zw);
        }
 
        String gzxz = entity.getGzxz();
        if (gzxz != null) {
            stmt.bindString(4, gzxz);
        }
 
        String gltz = entity.getGltz();
        if (gltz != null) {
            stmt.bindString(5, gltz);
        }
 
        String ssbm = entity.getSsbm();
        if (ssbm != null) {
            stmt.bindString(6, ssbm);
        }
 
        String ssgs = entity.getSsgs();
        if (ssgs != null) {
            stmt.bindString(7, ssgs);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(11, phoneNumber);
        }
 
        String dwjb = entity.getDwjb();
        if (dwjb != null) {
            stmt.bindString(12, dwjb);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RLST_USER entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String gw = entity.getGw();
        if (gw != null) {
            stmt.bindString(2, gw);
        }
 
        String zw = entity.getZw();
        if (zw != null) {
            stmt.bindString(3, zw);
        }
 
        String gzxz = entity.getGzxz();
        if (gzxz != null) {
            stmt.bindString(4, gzxz);
        }
 
        String gltz = entity.getGltz();
        if (gltz != null) {
            stmt.bindString(5, gltz);
        }
 
        String ssbm = entity.getSsbm();
        if (ssbm != null) {
            stmt.bindString(6, ssbm);
        }
 
        String ssgs = entity.getSsgs();
        if (ssgs != null) {
            stmt.bindString(7, ssgs);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(11, phoneNumber);
        }
 
        String dwjb = entity.getDwjb();
        if (dwjb != null) {
            stmt.bindString(12, dwjb);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public RLST_USER readEntity(Cursor cursor, int offset) {
        RLST_USER entity = new RLST_USER( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gw
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zw
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gzxz
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gltz
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ssbm
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ssgs
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phoneNumber
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // dwjb
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RLST_USER entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setGw(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZw(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGzxz(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGltz(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSsbm(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSsgs(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhoneNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDwjb(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(RLST_USER entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(RLST_USER entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RLST_USER entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
