package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.PZTDGX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PZTDGX".
*/
public class PZTDGXDao extends AbstractDao<PZTDGX, Long> {

    public static final String TABLENAME = "PZTDGX";

    /**
     * Properties of entity PZTDGX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property BHPZID = new Property(1, long.class, "BHPZID", false, "BHPZID");
        public final static Property TDXXID = new Property(2, long.class, "TDXXID", false, "TDXXID");
        public final static Property SFXTLR = new Property(3, String.class, "SFXTLR", false, "SFXTLR");
    }


    public PZTDGXDao(DaoConfig config) {
        super(config);
    }
    
    public PZTDGXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PZTDGX entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getBHPZID());
        stmt.bindLong(3, entity.getTDXXID());
 
        String SFXTLR = entity.getSFXTLR();
        if (SFXTLR != null) {
            stmt.bindString(4, SFXTLR);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PZTDGX entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getBHPZID());
        stmt.bindLong(3, entity.getTDXXID());
 
        String SFXTLR = entity.getSFXTLR();
        if (SFXTLR != null) {
            stmt.bindString(4, SFXTLR);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PZTDGX readEntity(Cursor cursor, int offset) {
        PZTDGX entity = new PZTDGX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getLong(offset + 1), // BHPZID
            cursor.getLong(offset + 2), // TDXXID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // SFXTLR
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PZTDGX entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBHPZID(cursor.getLong(offset + 1));
        entity.setTDXXID(cursor.getLong(offset + 2));
        entity.setSFXTLR(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PZTDGX entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PZTDGX entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PZTDGX entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
