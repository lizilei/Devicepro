package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.ICDXX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ICDXX".
*/
public class ICDXXDao extends AbstractDao<ICDXX, Long> {

    public static final String TABLENAME = "ICDXX";

    /**
     * Properties of entity ICDXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property WJMC = new Property(1, String.class, "WJMC", false, "WJMC");
        public final static Property WJBB = new Property(2, String.class, "WJBB", false, "WJBB");
        public final static Property CRC32 = new Property(3, String.class, "CRC32", false, "CRC32");
        public final static Property MD5 = new Property(4, String.class, "MD5", false, "MD5");
        public final static Property JYMSCSJ = new Property(5, String.class, "JYMSCSJ", false, "JYMSCSJ");
        public final static Property BGYY = new Property(6, String.class, "BGYY", false, "BGYY");
        public final static Property BGSJ = new Property(7, String.class, "BGSJ", false, "BGSJ");
        public final static Property ZSJID = new Property(8, long.class, "ZSJID", false, "ZSJID");
        public final static Property ZSJTYPE = new Property(9, String.class, "ZSJTYPE", false, "ZSJTYPE");
        public final static Property SFBDSJ = new Property(10, String.class, "SFBDSJ", false, "SFBDSJ");
        public final static Property SB_LS_ID = new Property(11, String.class, "SB_LS_ID", false, "SB_LS_ID");
        public final static Property SB = new Property(12, String.class, "SB", false, "SB");
        public final static Property SBSJ = new Property(13, String.class, "SBSJ", false, "SBSJ");
        public final static Property HZSJ = new Property(14, String.class, "HZSJ", false, "HZSJ");
        public final static Property SBDW = new Property(15, String.class, "SBDW", false, "SBDW");
        public final static Property SBCZLX = new Property(16, String.class, "SBCZLX", false, "SBCZLX");
        public final static Property LS_ZSJ_ID = new Property(17, String.class, "LS_ZSJ_ID", false, "LS_ZSJ_ID");
        public final static Property WJ_DW = new Property(18, String.class, "WJ_DW", false, "WJ_DW");
        public final static Property WJ_LS_ID = new Property(19, String.class, "WJ_LS_ID", false, "WJ_LS_ID");
        public final static Property SFXTLR = new Property(20, String.class, "SFXTLR", false, "SFXTLR");
        public final static Property ED_TAG = new Property(21, String.class, "ED_TAG", false, "ED_TAG");
    }


    public ICDXXDao(DaoConfig config) {
        super(config);
    }
    
    public ICDXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ICDXX entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String WJMC = entity.getWJMC();
        if (WJMC != null) {
            stmt.bindString(2, WJMC);
        }
 
        String WJBB = entity.getWJBB();
        if (WJBB != null) {
            stmt.bindString(3, WJBB);
        }
 
        String CRC32 = entity.getCRC32();
        if (CRC32 != null) {
            stmt.bindString(4, CRC32);
        }
 
        String MD5 = entity.getMD5();
        if (MD5 != null) {
            stmt.bindString(5, MD5);
        }
 
        String JYMSCSJ = entity.getJYMSCSJ();
        if (JYMSCSJ != null) {
            stmt.bindString(6, JYMSCSJ);
        }
 
        String BGYY = entity.getBGYY();
        if (BGYY != null) {
            stmt.bindString(7, BGYY);
        }
 
        String BGSJ = entity.getBGSJ();
        if (BGSJ != null) {
            stmt.bindString(8, BGSJ);
        }
        stmt.bindLong(9, entity.getZSJID());
 
        String ZSJTYPE = entity.getZSJTYPE();
        if (ZSJTYPE != null) {
            stmt.bindString(10, ZSJTYPE);
        }
 
        String SFBDSJ = entity.getSFBDSJ();
        if (SFBDSJ != null) {
            stmt.bindString(11, SFBDSJ);
        }
 
        String SB_LS_ID = entity.getSB_LS_ID();
        if (SB_LS_ID != null) {
            stmt.bindString(12, SB_LS_ID);
        }
 
        String SB = entity.getSB();
        if (SB != null) {
            stmt.bindString(13, SB);
        }
 
        String SBSJ = entity.getSBSJ();
        if (SBSJ != null) {
            stmt.bindString(14, SBSJ);
        }
 
        String HZSJ = entity.getHZSJ();
        if (HZSJ != null) {
            stmt.bindString(15, HZSJ);
        }
 
        String SBDW = entity.getSBDW();
        if (SBDW != null) {
            stmt.bindString(16, SBDW);
        }
 
        String SBCZLX = entity.getSBCZLX();
        if (SBCZLX != null) {
            stmt.bindString(17, SBCZLX);
        }
 
        String LS_ZSJ_ID = entity.getLS_ZSJ_ID();
        if (LS_ZSJ_ID != null) {
            stmt.bindString(18, LS_ZSJ_ID);
        }
 
        String WJ_DW = entity.getWJ_DW();
        if (WJ_DW != null) {
            stmt.bindString(19, WJ_DW);
        }
 
        String WJ_LS_ID = entity.getWJ_LS_ID();
        if (WJ_LS_ID != null) {
            stmt.bindString(20, WJ_LS_ID);
        }
 
        String SFXTLR = entity.getSFXTLR();
        if (SFXTLR != null) {
            stmt.bindString(21, SFXTLR);
        }
 
        String ED_TAG = entity.getED_TAG();
        if (ED_TAG != null) {
            stmt.bindString(22, ED_TAG);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ICDXX entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String WJMC = entity.getWJMC();
        if (WJMC != null) {
            stmt.bindString(2, WJMC);
        }
 
        String WJBB = entity.getWJBB();
        if (WJBB != null) {
            stmt.bindString(3, WJBB);
        }
 
        String CRC32 = entity.getCRC32();
        if (CRC32 != null) {
            stmt.bindString(4, CRC32);
        }
 
        String MD5 = entity.getMD5();
        if (MD5 != null) {
            stmt.bindString(5, MD5);
        }
 
        String JYMSCSJ = entity.getJYMSCSJ();
        if (JYMSCSJ != null) {
            stmt.bindString(6, JYMSCSJ);
        }
 
        String BGYY = entity.getBGYY();
        if (BGYY != null) {
            stmt.bindString(7, BGYY);
        }
 
        String BGSJ = entity.getBGSJ();
        if (BGSJ != null) {
            stmt.bindString(8, BGSJ);
        }
        stmt.bindLong(9, entity.getZSJID());
 
        String ZSJTYPE = entity.getZSJTYPE();
        if (ZSJTYPE != null) {
            stmt.bindString(10, ZSJTYPE);
        }
 
        String SFBDSJ = entity.getSFBDSJ();
        if (SFBDSJ != null) {
            stmt.bindString(11, SFBDSJ);
        }
 
        String SB_LS_ID = entity.getSB_LS_ID();
        if (SB_LS_ID != null) {
            stmt.bindString(12, SB_LS_ID);
        }
 
        String SB = entity.getSB();
        if (SB != null) {
            stmt.bindString(13, SB);
        }
 
        String SBSJ = entity.getSBSJ();
        if (SBSJ != null) {
            stmt.bindString(14, SBSJ);
        }
 
        String HZSJ = entity.getHZSJ();
        if (HZSJ != null) {
            stmt.bindString(15, HZSJ);
        }
 
        String SBDW = entity.getSBDW();
        if (SBDW != null) {
            stmt.bindString(16, SBDW);
        }
 
        String SBCZLX = entity.getSBCZLX();
        if (SBCZLX != null) {
            stmt.bindString(17, SBCZLX);
        }
 
        String LS_ZSJ_ID = entity.getLS_ZSJ_ID();
        if (LS_ZSJ_ID != null) {
            stmt.bindString(18, LS_ZSJ_ID);
        }
 
        String WJ_DW = entity.getWJ_DW();
        if (WJ_DW != null) {
            stmt.bindString(19, WJ_DW);
        }
 
        String WJ_LS_ID = entity.getWJ_LS_ID();
        if (WJ_LS_ID != null) {
            stmt.bindString(20, WJ_LS_ID);
        }
 
        String SFXTLR = entity.getSFXTLR();
        if (SFXTLR != null) {
            stmt.bindString(21, SFXTLR);
        }
 
        String ED_TAG = entity.getED_TAG();
        if (ED_TAG != null) {
            stmt.bindString(22, ED_TAG);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ICDXX readEntity(Cursor cursor, int offset) {
        ICDXX entity = new ICDXX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // WJMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // WJBB
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CRC32
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MD5
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // JYMSCSJ
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BGYY
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // BGSJ
            cursor.getLong(offset + 8), // ZSJID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ZSJTYPE
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // SFBDSJ
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // SB_LS_ID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // SB
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // SBSJ
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // HZSJ
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // SBDW
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // SBCZLX
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // LS_ZSJ_ID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // WJ_DW
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // WJ_LS_ID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // SFXTLR
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // ED_TAG
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ICDXX entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWJMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWJBB(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCRC32(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMD5(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJYMSCSJ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBGYY(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBGSJ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZSJID(cursor.getLong(offset + 8));
        entity.setZSJTYPE(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSFBDSJ(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSB_LS_ID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSB(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSBSJ(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHZSJ(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSBDW(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSBCZLX(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLS_ZSJ_ID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setWJ_DW(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWJ_LS_ID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setSFXTLR(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setED_TAG(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ICDXX entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ICDXX entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ICDXX entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
