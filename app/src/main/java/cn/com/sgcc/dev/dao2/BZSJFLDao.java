package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.BZSJFL;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BZSJFL".
*/
public class BZSJFLDao extends AbstractDao<BZSJFL, Integer> {

    public static final String TABLENAME = "BZSJFL";

    /**
     * Properties of entity BZSJFL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Bzsjflmc = new Property(1, String.class, "bzsjflmc", false, "BZSJFLMC");
        public final static Property Bz = new Property(2, String.class, "bz", false, "BZ");
        public final static Property Sfkbj = new Property(3, String.class, "sfkbj", false, "SFKBJ");
    }


    public BZSJFLDao(DaoConfig config) {
        super(config);
    }
    
    public BZSJFLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BZSJFL entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String bzsjflmc = entity.getBzsjflmc();
        if (bzsjflmc != null) {
            stmt.bindString(2, bzsjflmc);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(3, bz);
        }
 
        String sfkbj = entity.getSfkbj();
        if (sfkbj != null) {
            stmt.bindString(4, sfkbj);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BZSJFL entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String bzsjflmc = entity.getBzsjflmc();
        if (bzsjflmc != null) {
            stmt.bindString(2, bzsjflmc);
        }
 
        String bz = entity.getBz();
        if (bz != null) {
            stmt.bindString(3, bz);
        }
 
        String sfkbj = entity.getSfkbj();
        if (sfkbj != null) {
            stmt.bindString(4, sfkbj);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public BZSJFL readEntity(Cursor cursor, int offset) {
        BZSJFL entity = new BZSJFL( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bzsjflmc
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bz
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sfkbj
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BZSJFL entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setBzsjflmc(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBz(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSfkbj(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(BZSJFL entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(BZSJFL entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BZSJFL entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
