package cn.com.sgcc.dev.dao2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.com.sgcc.dev.model2.AKXTGX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AKXTGX".
*/
public class AKXTGXDao extends AbstractDao<AKXTGX, Long> {

    public static final String TABLENAME = "AKXTGX";

    /**
     * Properties of entity AKXTGX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Bhpzid = new Property(1, String.class, "bhpzid", false, "BHPZID");
        public final static Property Akxtid = new Property(2, String.class, "akxtid", false, "AKXTID");
        public final static Property Akzdlx = new Property(3, String.class, "akzdlx", false, "AKZDLX");
    }


    public AKXTGXDao(DaoConfig config) {
        super(config);
    }
    
    public AKXTGXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AKXTGX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bhpzid = entity.getBhpzid();
        if (bhpzid != null) {
            stmt.bindString(2, bhpzid);
        }
 
        String akxtid = entity.getAkxtid();
        if (akxtid != null) {
            stmt.bindString(3, akxtid);
        }
 
        String akzdlx = entity.getAkzdlx();
        if (akzdlx != null) {
            stmt.bindString(4, akzdlx);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AKXTGX entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bhpzid = entity.getBhpzid();
        if (bhpzid != null) {
            stmt.bindString(2, bhpzid);
        }
 
        String akxtid = entity.getAkxtid();
        if (akxtid != null) {
            stmt.bindString(3, akxtid);
        }
 
        String akzdlx = entity.getAkzdlx();
        if (akzdlx != null) {
            stmt.bindString(4, akzdlx);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AKXTGX readEntity(Cursor cursor, int offset) {
        AKXTGX entity = new AKXTGX( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bhpzid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // akxtid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // akzdlx
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AKXTGX entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBhpzid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAkxtid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAkzdlx(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AKXTGX entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AKXTGX entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AKXTGX entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
